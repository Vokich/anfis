import telebot
from datetime import datetime, timedelta
import random

TOKEN = "YOUR_TOKEN_HERE"
bot = telebot.TeleBot(TOKEN)
stats = {} 


f = open('facts.txt', 'r', encoding='UTF-8')
facts = f.read().split('\n')
f.close()

d = open('thinks.txt', 'r', encoding='UTF-8')
think = d.read().split('\n')
d.close()

bad_words = ['word']



@bot.message_handler(commands=['ban'])
def ban_user(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if is_user_admin(chat_id, user_id):
        try:
            user_to_ban = message.reply_to_message.from_user.id
            bot.kick_chat_member(chat_id, user_to_ban)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!")
        except Exception as e:
            bot.reply_to(message, "–û–π, –ø–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")


@bot.message_handler(commands=['unban'])
def unban_user(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if is_user_admin(chat_id, user_id):
        try:
            user_to_unban = message.reply_to_message.from_user.id
            bot.unban_chat_member(chat_id, user_to_unban)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω!")
        except Exception as e:
            bot.reply_to(message, "–û–π, –ø–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")


def is_user_admin(chat_id, user_id):
    chat_member = bot.get_chat_member(chat_id, user_id)
    return chat_member.status == "administrator" or chat_member.status == "creator"



@bot.message_handler(commands=['mute'])
def mute_user(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        command = message.text.split(maxsplit=1)[1]
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—å—é—Ç–∞ –≤ —á–∞—Å–∞—Ö.")
        return
    try:
        mute_duration = int(command)
    except ValueError:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—å—é—Ç–∞ –≤ —á–∞—Å–∞—Ö —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return
    if is_user_admin(chat_id, user_id):
        try:
            user_to_mute = message.reply_to_message.from_user.id
            mute_duration = datetime.now() + timedelta(hours=mute_duration)
            bot.restrict_chat_member(chat_id, user_to_mute, until_date=mute_duration)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username}"
                                  f" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {command} —á–∞—Å!")
        except Exception as e:
            bot.reply_to(message, "–û–π, –ø–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")



@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if is_user_admin(chat_id, user_id):
        try:
            user_to_unmute = message.reply_to_message.from_user.id
            bot.restrict_chat_member(chat_id, user_to_unmute, can_send_messages=True, can_send_media_messages=True,
                                     can_send_other_messages=True, can_add_web_page_previews=True)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username}"
                                  f" –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º—å—é—á–µ–Ω!")
        except Exception as e:
            bot.reply_to(message, "–û–π, –ø–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")


@bot.message_handler(commands=['selfstats'])
def user_stats(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username
    if chat_id not in stats:
        bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")
    else:
        if user_id not in stats[chat_id]['users']:
            bot.reply_to(message, "–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        else:
            user_messages = stats[chat_id]['users'][user_id]['messages']
            total_messages = stats[chat_id]['total_messages']
            percentage = round(user_messages / total_messages * 100, 2)
            bot.reply_to(message, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_messages}\n–ü—Ä–æ—Ü–µ–Ω—Ç"
                                  f" –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {percentage}%")


@bot.message_handler(commands=['stats'])
def chat_stats(message):
    chat_id = message.chat.id
    if chat_id not in stats:
        bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")
    else:
        total_messages = stats[chat_id]['total_messages']
        unique_users = len(stats[chat_id]['users'])
        bot.reply_to(message, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")


@bot.message_handler(commands=['fact'])
def fact(message):
    answer = random.choice(facts)
    bot.send_message(message.chat.id, answer)

@bot.message_handler(commands=['thinks'])
def thinks(message):
    answer = random.choice(think)
    bot.send_message(message.chat.id, answer)


@bot.message_handler(func=lambda message: any(word in message.text.lower() for word in bad_words))
def handle_bad_words(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    mute_duration = datetime.now() + timedelta(hours=1)
    bot.delete_message(chat_id, message.message_id)
    bot.restrict_chat_member(chat_id, user_id, until_date=mute_duration)
    bot.reply_to(message, f"–í—ã —Å–∫–∞–∑–∞–ª–∏ –Ω–µ—Ö–æ—Ä–æ—à–µ–µ —Å–ª–æ–≤–æ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} "
                          f"—Å—Ç–æ–∏—Ç –≤ —É–≥–ª—É –Ω–∞ 1 —á–∞—Å!")


@bot.message_handler(commands=['cube'])
def cube(message):
    bot.send_message(message.chat.id, "üé≤")

@bot.message_handler(commands=["GOIDA", "goida"])
def goida_start(message):
    try:
        goida_num = message.text.split(maxsplit=1)[1]
    except IndexError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä: /goid–∞ 10")
        return
    for i in range(int(goida_num)):
        bot.send_message(message.chat.id, "–ì–û–ô–î–ê!!!!")
    bot.send_message(message.chat.id, "–ì–æ–π–¥–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å((")

@bot.message_handler(commands=["return"])
def return_text(message):
    try:
        command_parts = message.text.split(maxsplit=2)
        many_return = int(command_parts[1])
        text_to_return = command_parts[2]
    except IndexError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä: /return <–∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π> <—Ç–µ–∫—Å—Ç>")
        return
    for i in range(int(many_return)):
        bot.send_message(message.chat.id, text_to_return)
    bot.send_message(message.chat.id, "–ö–æ–Ω–µ—Ü –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")




if __name__ == '__main__':
    bot.polling(none_stop=True)